#1
def fatorial(n):
    if n == 0:
        return 1
    else:
        resultado = 1
    for i in range(1, n+1):
        resultado *= i
    return resultado
    

n = int(input("Insira um número inteiro: "))
print(f"o  fatotial de {n} é {fatorial(n)}")

num = input("Digite um numero com no mínimo 4 e no máximo 6 digitos: ")


while (len(num) < 4 or len(num) > 6):
    num = input("Digite um numero com no mínimo 4 e no máximo 6 digitos: ")


soma = 0   
for x in num:
    soma += int(x)


soma %= 10


if len(num) == 4:
    print (f"00{num}-{soma}")
elif len(num) == 5:
    print (f"0{num}-{soma}")
else:
    print(f"{num}-{soma}")


def converte_temperatura(valor, de, para):
    match (de, para):
        case ('celsius', 'fahrenheit'):
            return (valor * 9/5) + 32
        case ('fahrenheit', 'celsius'):
            return (valor - 32) * 5/9
        case ('celsius', 'kelvin'):
            return valor + 273.15
        case ('kelvin', 'celsius'):
            return valor - 273.15
        case ('fahrenheit', 'kelvin'):
            return (valor - 32) * 5/9 + 273.15
        case ('kelvin', 'fahrenheit'):
            return (valor - 273.15) * 9/5 + 32
        case _:
            return "Conversão inválida"

#2
def converte_distancia(valor, de, para):
    match (de, para):
        case ('metros', 'quilômetros'):
            return valor / 1000
        case ('quilômetros', 'metros'):
            return valor * 1000
        case ('metros', 'milhas'):
            return valor / 1609.34
        case ('milhas', 'metros'):
            return valor * 1609.34
        case ('quilômetros', 'milhas'):
            return valor / 1.60934
        case ('milhas', 'quilometros'):
            return valor * 1.60934
        case _:
            return "Conversão inválida"


def converte_tempo(valor, de, para):
    match (de, para):
        case ('segundos', 'minutos'):
            return valor / 60
        case ('minutos', 'segundos'):
            return valor * 60
        case ('minutos', 'horas'):
            return valor / 60
        case ('horas', 'minutos'):
            return valor * 60
        case ('segundos', 'horas'):
            return valor / 3600
        case ('horas', 'segundos'):
            return valor * 3600
        case _:
            return "Conversão inválida"


def transforma(tipo, valor, de, para):
    match tipo:
        case 'a':
            return converte_temperatura(valor, de, para)
        case 'b':
            return converte_distancia(valor, de, para)
        case 'c':
            return converte_tempo(valor, de, para)
        case _:
            return "Tipo de conversão inválido"


print("Tipos de conversão:")
print("A: temperatura (Celsius, Fahrenheit, Kelvin)")
print("B: distância (Metros, Quilometros, Milhas)")
print("C: tempo (Segundos, Minutos, Horas)")


tipo = input("Informe o tipo de conversão (A, B ou C): ")
valor = float(input("Informe o valor a ser convertido: "))
de = input("Informe a unidade de origem: ")
para = input("Informe a unidade de destino: ")


resultado = transforma(tipo, valor, de, para)


print(f"Resultado: {resultado}")

#4
cod = int(input("Informe o codigo entro 1 e 10: "))
while (cod < 1 or cod > 10):
    cod = int(input("Informe o codigo entro 1 e 10: "))


peso = float(input("Informe o peso em quilos: "))


codPais =  int(input("Informe o cod do pais entre 1 e 3: "))
while (codPais < 1 or codPais > 3):
    codPais =  int(input("Informe o cod do pais entre 1 e 3: "))


gramas = peso * 1000
preco = 0
if (cod >= 1 and cod <= 4):
    preco = gramas * 10
elif(cod >= 5 and cod <= 7):
    preco = gramas * 25
else:
    preco = gramas * 35


imposto = 0
match codPais:
    case 1:
        imposto = 0
    case 2:
        imposto = preco * 0.15
    case 3:
        imposto = preco * 0.25


valorTotal = preco + imposto
        
print(f"Gramas: {gramas}, Preco Total {preco}, Valor do Imposto: {imposto}, Valor Total: {valorTotal} ")

#5
def criptografar(numero):
    d1 = int(numero[0])
    d2 = int(numero[1])
    d3 = int(numero[2])
    d4 = int(numero[3])


    d1 = (d1 + 7) % 10
    d2 = (d2 + 7) % 10
    d3 = (d3 + 7) % 10
    d4 = (d4 + 7) % 10


    temp = d1 
    d1 = d3
    d3 = temp


    temp = d2
    d2 = d4
    d4 = temp


    return str(d1) + str(d2) + str(d3) + str(d4)


numero = input("Digite um número de 4 dígitos para criptografar: ")


while len(numero) != 4:
    numero = input("Digite um número de 4 dígitos para criptografar: ")


numero_criptografado = criptografar(numero)
print(f"Número criptografado: {numero_criptografado}")


def descriptografar(numero_criptografado):
    d1 = int(numero_criptografado[0])
    d2 = int(numero_criptografado[1])
    d3 = int(numero_criptografado[2])
    d4 = int(numero_criptografado[3])


    temp = d1
    d1 = d3
    d3 = temp


    temp = d2
    d2 = d4
    d4 = temp


    d1 = (d1 - 7) % 10
    d2 = (d2 - 7) % 10
    d3 = (d3 - 7) % 10
    d4 = (d4 - 7) % 10


    return str(d1) + str(d2) + str(d3) + str(d4)


numero_criptografado = input("Digite um número de 4 dígitos criptografado para descriptografar: ")


while len(numero_criptografado) != 4:
    numero_criptografado = input("Digite um número de 4 dígitos criptografado para descriptografar: ")


numero_original = descriptografar(numero_criptografado)
print(f"Número descriptografado: {numero_original}")

#6
n = int(input("Digite um valor inteiro e positivo para N: "))


while n <= 0:
    n = int(input("Digite um valor inteiro e positivo para N: "))


soma = 1
fatorial = 1


for i in range(2, n + 1):
    fatorial *= i
    soma += 1 / fatorial


print(f"A soma E é: {soma}")

#7
x = float(input("Digite o valor de x (em radianos): "))
termos = int(input("Digite o número de termos para a aproximação: "))


soma = 0
fatorial = 1
potenciaX = 1


for i in range(termos):
    if i > 0:
        fatorial *= (2 * i) * (2 * i - 1)
        potenciaX *= x * x


    termo = potenciaX / fatorial
    if i % 2 == 0:
        soma += termo
    else:
        soma -= termo


print(f"O valor aproximado de cos({x}) é: {soma}")

#8
import math


def calcular_raiz_quadrada(N, iteracoes):
    k = 1.0
    resultados = []
    
    for i in range(iteracoes):
        k = (k + N / k) / 2
        resultados.append(k)
    
    return resultados


N = float(input("Digite o valor de N: "))
iteracoes = 12


resultados = calcular_raiz_quadrada(N, iteracoes)


print("Iteração | Valor de k")
print("--------------------")
for i in range(iteracoes):
    print(f"{i + 1:9d} | {resultados[i]:.6f}")


raiz_quadrada = math.sqrt(N)
print(f"\nRaiz quadrada verdadeira de {N}: {raiz_quadrada:.6f}")
